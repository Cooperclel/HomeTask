package equation;

public interface IEquations {
    void equation1(int myResult1);/* 5+8/8*/
    /*По приоритету Операция деления выше чем сложения.
     * Поэтому мы сначала делим 8/8 а потом складываем с 5*/
    void equation2(int myResult2);/*(5+2)/8*/
    /*Так как выражение 5+2 стоит в скобках, сначала выполняем его, а потм делим на 8
     * Так получаемая переменна типа int, то дробная часть отсекается*/
    void equation3(int myResult3);/*(5 + 2++)/8 Ошибка компиляции*/
    /*Так как 2++ это постфикс, то это выражение выполнится только после того, как отработает выражение в скобках, то етсь сначала мы прибавим к 5 два.
    Потом произойдет опрация --8, так как это постфикс, то --8 сразу станет равным 7.
    * В конце делим на 7*/
    void equation4(int myResult4);/*(5 + 2++)/ --8*/
    /*Сначало выполняем выражние в скобках, потом 2++ становится равным 3, дальше по приоритеу --8.
     * В конце выполняем операцию деления*/
    void equation5(int myResult5);/*(5*2>>2++)/--8*/
    /*Выражение в скобках:сначала считаем 5*2 потом считаем сдвиг вправо на два.
     * Выполняем подсчет --8 и в конце операция деления*/
    void equation6(int myResult6);/*(5+7>20?68:22*2>>2++)/--8*/
    /*Выражение ? есле выражение верно: если выражение ложно.
     * Сначала выполняем выражение в скобках. 5+7> 20 ложное выражение, следовательно мы должны получить на выходе выражение 22*2>>2++.
     *Сначала по приоритету 22*2 так как 2++ это постфикс,потом >>. После мы получаем 11, потом по приоритеу происходит операция --8, так как это префик
     *11/7 получем 1, так как целочисленный тип. */
    //void equation7(int myResult7);/*(5+7>20?68=>68:22*2>>2++)/--8*/
    /*При запуске программы выдает ошибку компиляции на 68=>68*/
    void equation8(boolean myResult8);/*6-2>3&&12*12<=119*/
    /*Мы имеем два выражения 6-2>3 и 12*12<=198, кде первое верно, а второе ложно.
     * Операция логичского и (&&) получет при наличии хотябы одного false -false */
    void equation9(boolean myResult9);/*true&&false*/
    /*Аналогично 8-му*/
}
